{
  "hash": "9481869432b74d07929258c1cf2ce504",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Stata to R code translations\"\nauthor: \"Ben Harrap\"\ndate: 2024-07-03\ntoc: true\ncategories: \n  - code\n  - R\n  - Stata\n  - research\nimage: false\ndraft: true\n---\n\n::: {.cell}\n\n:::\n\n\nMaking the transition from Stata to R can be challenging as the two languages are quite different. My initial training in biostatistics was using Stata, however I made a concerted effort to learn R by doing my entire PhD using the language. There are some things that I still struggle with in R that I found a lot easier in Stata, but that's ok - we're all still learning! \n\nThis post acts as a reference to provide Stata and R code side-by-side to help people switching between the two languages. There's a few things to note before diving in:\n\n- All examples are based on the `auto` dataset from Stata.\n  - In Stata this is accessed using `sysuse auto`.\n  - In R this is accessed by reading the Stata dataset using `auto <- haven::read_dta(\"<path-to-stata-goes-here>/auto.dta\")`.\n- I've tested these examples using Stata version 15.\n- R packages are stated where relevant, however `tidyverse` is generally used over base R.\n- The ChatGPT <a href=\"https://chatgpt.com/g/g-dDlKTFvbT-stata-to-r-code-translator\" target=\"_blank\">Stata to R Code Translator</a> provided some assistance.\n\n## Workflow differences\n\nI'll briefly outline some important things to know when switching from Stata to R, because while R can do everything Stata can do, it goes about it differently.\n\n### Pipes\n\nInstead of executing each bit of code line by line as you \n\n### Assigning output\n\nOne of the main things to adjust to in R is the need to assign your output. In Stata, if you were to create a new variable, you would just write `gen new_var = old_var*2` and it would automatically create `new_var` in the current dataset. Similarly, if you run a regression model, Stata stores a bunch of information in the background that you can access, such as the `lincom` and `margins` functions.\n\nIn R, the default is to display the output of your code in the console (similar to Stata's results window). So if you were to run `auto |> mutate(new_var = 1)` it would just print the result in the console. Instead, you need to assign the output using the assignment operator `<-` to an object, either an existing or a new one. For example:\n\n-   `auto <- auto |> mutate(new_var = 1)` writes over the auto object (our dataset)\n-   `auto_new <- auto |> mutate(new_var = 1)` creates a new object called auto_new and leaves the original auto object unchanged\n\n### Further resources\n\nThe books I would recommend using to keep learning from are:\n\n-   [R for Data Science](https://r4ds.hadley.nz/)\n-   [Advanced R](https://adv-r.hadley.nz/)\n-   [ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book.org/)\n-   [Fundamentals of Data Visualization](https://clauswilke.com/dataviz/)\n\nNote that Fundamentals of Data Visualization doesn't include the R code by default. Instead, Claus provides a link on the welcome page to the book's GitHub repo, which you can search through to find the code to replicate the graphs in the book.\n\n<!-- ## Data cleaning -->\n\n## Regression\n\nThe correspondences here represent the models that you need to run to generate (usually) the same results, not the code that will produce the same output. If you simply run the R code it will output something minimal, instead you will want to assign the model to an object. For the linear regression example, this would be `model <- lm(price ~ mpg, data = auto)` followed by using the summary function on that object `summary(model)`. \n\nI say 'usually' the same results because for some methods there seems to be some minor difference under the hood that means estimates differ slightly. For example, in the negative binomial example the standard errors for `mpg` are different at the 4th decimal. Always check your outputs :)\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|Model                        |Stata                    |R                                                      |Note                        |\n|:----------------------------|:------------------------|:------------------------------------------------------|:---------------------------|\n|Simple linear regression     |`reg price mpg`          |`lm(price ~ mpg, data = auto)`                         |                            |\n|Logistic regression          |`logit foreign mpg`      |`glm(foreign ~ mpg, data = auto, family = \"binomial\")` |                            |\n|Poisson regression           |`poisson rep78 mpg`      |`glm(rep78 ~ mpg, data = auto, family = \"poisson\")`    |                            |\n|Negative binomial regression |`nbreg displacement mpg` |`MASS::glm.nb(displacement ~ mpg, data = auto)`        |Requires the `MASS` package |\n\n\n:::\n:::\n\n\n## Generalised estimating equations\n\n\n\n## Mixed-effects models\n\n\n\n<!-- ## Data visualisation -->\n\n<!-- ### Histograms -->\n\n\n\n<!-- ### Density plots -->\n\n\n\n<!-- ### Bar charts -->\n\n\n\n<!-- ### Line charts -->\n\n\n\n<!-- ### Box plots -->\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}