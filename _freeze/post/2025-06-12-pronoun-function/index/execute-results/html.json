{
  "hash": "e12ee7f314db972d8552161397ab39c3",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: html\ntitle: \"An R function for pronouns\"\nauthor: Ben Harrap\ndate: 2025-06-12\ntoc: false\ncategories: \n  - R\n  - programming\n  - quarto\n---\n\nPeople can have pronouns that change over time or multiple pronouns, like myself. In an ideal world, I'd love it if people used a random pronoun each time, but people aren't random number generators and when presented with \"any pronouns\" will usually default to exclusively \"he\".\n\nThis got me thinking though... What if I could randomly sample from a list of pronouns? So that's what I've done â€” for Quarto users at least. It's simple really, all you need to do is define each person's pronouns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nben <- list(name = \"ben\",\n            subject = c(\"he\",\"she\",\"they\"),\n            object = c(\"him\",\"her\",\"their\"),\n            dependent = c(\"his\",\"her\",\"their\"),\n            independent = c(\"his\",\"hers\",\"theirs\"),\n            reflextive = c(\"himself\",\"herself\",\"themself\"))\n```\n:::\n\n\nI have to thank [Wikipedia](https://en.wikipedia.org/wiki/Pronoun#English_pronouns){target=\"_blank\"} for providing the names of the different pronoun forms, it's been a couple of decades since I had to think about this. Now we can just write a little function that samples from this list and returns the appropriate pronoun, in the format required.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npronoun <- function(who, which, format = \"lower\"){\n  if (format == \"title\") {\n  gsub(\"(\\\\w)(\\\\w*)\", \"\\\\U\\\\1\\\\L\\\\2\", sample(who[[which]],1), perl=TRUE)\n  } else {\n    sample(who[[which]],1)\n  }\n}\n\npronoun(ben,\"subject\",\"title\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"He\"\n```\n\n\n:::\n:::\n\n\nTo use this, you would just call the function in-text like you would any R function. I was very satisfied getting to this point (and figuring out how to do it in base R), but then I realised that English is a very annoying language. The particularly annoying part is that because any of he, she, and they could be picked, it's hard to know what the right verb to choose is. To illustrate:\n\n`` ` r pronoun(ben,\"subject\",\"title\")` likes greyhounds``\n\nIs returned as:\n\nShe likes greyhounds\n\nIn my Quarto file I have no idea which pronoun is going to get picked (yay!) but depending on which one gets picked, I should've used 'like' or 'likes'.\n\nWell that's a future me problem, this was just a fun little proof of concept. If I come back around to this, maybe I'll:\n\n- Extend the function to cover verbs\n- Integrate it with YAML somehow? It'd be cool to attach pronouns to author YAML and turn the function into a Quarto extension",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}