---
format: html
title: "tidyverse functions you might not know about"
author: Ben Harrap
date: 2025-05-23
toc: true
categories: 
  - R
  - programming
  - data
---

Sometimes you ask for help and people provide you with solutions using functions you didn't know exist. That happened to me today and made me realise that I should look through the list of functions provided in the `tidyverse` packages I regularly use. So I did that and I discovered some cool functions that I should definitely be using!

I've listed some handy functions here and some use cases I've had for them.

## `dplyr`

If you want to check out the list of `dplyr` functions yourself, you can find them at [https://dplyr.tidyverse.org/reference/index.html](https://dplyr.tidyverse.org/reference/index.html){target="_blank"}

### Combining values from multiple columns row-wise (`c_across()`)

Scenario: You have set of variables you need to create a total score for, like the Kessler K-5.

```{r}
#| message: false
#| echo: false
library(tidyverse)
set.seed(20250313)
k5 <- tibble(
  id = c(1,2,3,4),
  q1 = round(runif(4,1,5),digits = 0),
  q2 = round(runif(4,1,5),digits = 0),
  q3 = round(runif(4,1,5),digits = 0),
  q4 = round(runif(4,1,5),digits = 0),
  q5 = round(runif(4,1,5),digits = 0)
)

k5
```

`c_across()` provides a neat way of doing this and is designed to work with data grouped using `rowwise()`:

```{r}
k5 |> 
  rowwise() |> 
  mutate(
    k5_score = sum(c_across(q1:q5)),
  ) |> 
  ungroup()
```

My original approach would've used a combination of `rowSums()` and `pick()`:

```{r}
k5 <- k5 |> 
  mutate(
    k5_score = rowSums(pick(q1:q5))
  )
k5
```

The advantage of my original approach is you don't need to specify `rowwise()` and `ungroup()`, but this only works for sums and means because base only provides `rowSums` and `rowMeans`. If you want to do any other operations, `c_across()` is your friend!

### Set values to missing under a condition (`na_if()`)

I would normally use `case_when()` to set observations to missing when they meet particular conditions, but `na_if()` seems like a more direct way of doing that:

```{r}
k5 <- k5 |> 
  mutate(
    k5_score = na_if(k5_score, 13)
  )
k5
```

### `ifelse` but `tidyverse` style (`if_else()`)

I would normally have used `case_when()` in this case too, as I find it easier read what's happening in each condition, but occasionally I find myself using `ifelse` for convenience when I only need to use one condition.

`if_else()` just seems like a better version of `ifelse()`. The main appeal is the inclusion of the `missing` argument, which lets you specify what you want missing values to be coded as:

```{r}
k5 |> 
  mutate(
    k5_category = if_else(k5_score < 12, "low","high", missing = "missing")
  )
```

### Using another dataset up update rows (`rows_update()`)

This was a great recommendation by someone who helped me solve a problem efficiently. I had one dataset consisting of uncleaned responses to a paper questionnaire, which had been digitsed using OCR. I had a secondary dataset where the original paper questionnaire had been audited when the OCR seemed to have done a poor job. 

Sticking with the K-5 data, imagine we have the audited data as follows:

```{r}
#| echo: false
audit <- tibble(
  id = c(3,3),
  variable = c("q1","q2"),
  original = c(2,4),
  audited = c(1,5)
)

audit
```

All I had to do was use `pivot_longer()` to put the uncleaned data into long format and then use `rows_update()` to find and replace the corresponding values, then `pivot_wider()` back into the original format.

```{r}
k5 |> 
  pivot_longer(
    !id,
    names_to = "variable",
    values_to = "response"
    ) |>
  rows_update(
    audit |> 
      rename(response = audited) |> 
      select(id, variable, response),
    by = c("id","variable")
  ) |> 
  pivot_wider(
    names_from = "variable",
    values_from = "response"
  )
```

Note that inside of `rows_update()` I take `audit`, rename the column with the correct values to match the column name in the `data`, then keep only the columns used to identify the unique rows (`id` and `variable`) and the value used for updating (`response`).

There's a whole suite of row-specific functions (see [here](https://dplyr.tidyverse.org/reference/rows.html)), but I have found `rows_update()` being especially helpful.

### Adding rows to a dataset `bind_rows()`

I feel like everyone probably knows about this, but I wanted to quickly mention that I recently discovered I was using it inefficiently! `bind_rows()` accepts multiple things to be bound, meaning you can write:

```{r}
#| eval: false
df1 |> bind_rows(df2, df3, df4)
```

Instead of what I was previously doing:

```{r}
#| eval: false
df1 |> 
  bind_rows(df2) |> 
  bind_rows(df3) |> 
  bind_rows(df4)
```

## `tibble`

You can find the `tibble` reference list here [https://tibble.tidyverse.org/reference/index.html](https://tibble.tidyverse.org/reference/index.html)

### Adding rows in specific locations (`add_row()`)

The use-case I had for this was actually solved by just using `gtsummary`, but before I discovered that package I was making summary tables by hand. I'd do this by combining the output from `tabyl()` and `summarise()` into one data frame. For example:

```{r}
summary <- k5 |>
  summarise(
    n = n(),
    mean = mean(q1),
    sd = sd(q1),
    min = min(q1),
    max = max(q1)
  ) |>
  pivot_longer(everything())

summary
```

But the number of participants is different to summaries of responses to Q1, so I want to add a row to make this clear. This is easily done by using the `.before = ` argument: 

```{r}
summary |> 
  add_row(
    name = "Q1 responses",
    .before = 2
  )
```

### Converting lists to tibbles (`enframe()`)

I've been doing a lot of work with APIs and getting data returned as JSON, which the `httr2` package helpfully converts into a more usable format in R. Unfortunately, what I get tends to be a lot of nested lists that I need to combine together into a rectangular format.

```{r}
my_list <- c("Victoria","Western Australia","Tasmania")

my_list
```

Enter `enframe()`. It works with vectors and converts them into a tibble with two columns. Very simple, very useful.

```{r}
enframe(my_list)
```

## `tidyr`

See the `tidyr` reference list here [https://tidyr.tidyverse.org/reference/index.html](https://tidyr.tidyverse.org/reference/index.html)

### Getting values out of list columns (`unnest()`)

Building on the previous example, you might end up with a column that contains lists, but you want those values as columns (or rows).

```{r}
my_list <- tibble(
  state = list(tibble("Victoria","Western Australia","Tasmania")),
  territory = list(tibble("Australian Capital Territory","Northern Territory"))
    )

my_list
```

These lists can be extracted using `unnest`:

```{r}
unnest(my_list, col = c(state, territory))
```

There's also `unnest_longer()` and `unnest_wider()`, depending on the shape you.

### Propagating non-missing values row-wise `fill()`

This has been such a useful function in so many situations for me, yet somehow I frequently forget about it!

My most recent use-case was creating a data dictionary based on metadata output from REDCap. In the questionnaire, section headers are used to paginate the different sections, but in the metadata the header is attached to a single variable:

```{r}
dictionary <- tibble(
  variable = c("name","dob","q1","q2","q3","q4","q5"),
  header = c("About you",NA,"Psychological distress",NA,NA,NA,NA)
)

dictionary
```

When creating the data dictionary, I want the header to be present for every variable as it can be useful to identify or analyse data by section:

```{r}
dictionary |> 
  fill(header, .direction = "down")
```

The `.direction` argument accepts "down", "up", "downup", and "updown", meaning you can fill in multiple directions. This is especially powerful when you combine it with `group_by()`, allowing you to fill without worrying about propagating into the wrong group!